<?php

namespace DoctrineProxies\__CG__\App\Domain\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \App\Domain\Entities\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = ['permissions' => NULL];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        unset($this->permissions);

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * 
     * @param string $name
     */
    public function __get($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

            return $this->$name;
        }

        trigger_error(sprintf('Undefined property: %s::$%s', __CLASS__, $name), E_USER_NOTICE);
    }

    /**
     * 
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

            $this->$name = $value;

            return;
        }

        $this->$name = $value;
    }

    /**
     * 
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

            return isset($this->$name);
        }

        return false;
    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'name', 'posts', 'organisations', 'email', 'password', 'usertype', 'country', 'gender', 'roles', 'permissions', 'teachers', 'schooladmins', 'students', 'duties', 'addresses', 'usercontacts', 'medicalissues', 'interests', 'family', 'familyuser', 'workhistories', 'userpackages', 'paymentrecords', 'tempschools', 'rememberToken', 'createdAt', 'updatedAt'];
        }

        return ['__isInitialized__', 'id', 'name', 'posts', 'organisations', 'email', 'password', 'usertype', 'country', 'gender', 'roles', 'teachers', 'schooladmins', 'students', 'duties', 'addresses', 'usercontacts', 'medicalissues', 'interests', 'family', 'familyuser', 'workhistories', 'userpackages', 'paymentrecords', 'tempschools', 'rememberToken', 'createdAt', 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

            unset($this->permissions);
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(\App\Domain\ValueObjects\Name $name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsertype()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsertype', []);

        return parent::getUsertype();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsertype($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsertype', [$type]);

        return parent::setUsertype($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthIdentifierName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthIdentifierName', []);

        return parent::getAuthIdentifierName();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthIdentifier', []);

        return parent::getAuthIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function getPermissions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPermissions', []);

        return parent::getPermissions();
    }

    /**
     * {@inheritDoc}
     */
    public function getTeachers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeachers', []);

        return parent::getTeachers();
    }

    /**
     * {@inheritDoc}
     */
    public function getStudents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStudents', []);

        return parent::getStudents();
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganisations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganisations', []);

        return parent::getOrganisations();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganisations(\App\Domain\Entities\School $school)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganisations', [$school]);

        return parent::setOrganisations($school);
    }

    /**
     * {@inheritDoc}
     */
    public function isAdmin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAdmin', []);

        return parent::isAdmin();
    }

    /**
     * {@inheritDoc}
     */
    public function isOwner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOwner', []);

        return parent::isOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function getSchoolAdmins()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSchoolAdmins', []);

        return parent::getSchoolAdmins();
    }

    /**
     * {@inheritDoc}
     */
    public function getDuties()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuties', []);

        return parent::getDuties();
    }

    /**
     * {@inheritDoc}
     */
    public function getAddress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAddress', []);

        return parent::getAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserContact()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserContact', []);

        return parent::getUserContact();
    }

    /**
     * {@inheritDoc}
     */
    public function getMedicalIssue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMedicalIssue', []);

        return parent::getMedicalIssue();
    }

    /**
     * {@inheritDoc}
     */
    public function getInterests()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInterests', []);

        return parent::getInterests();
    }

    /**
     * {@inheritDoc}
     */
    public function getFamily()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFamily', []);

        return parent::getFamily();
    }

    /**
     * {@inheritDoc}
     */
    public function getFamilyMember()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFamilyMember', []);

        return parent::getFamilyMember();
    }

    /**
     * {@inheritDoc}
     */
    public function getFamilyUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFamilyUser', []);

        return parent::getFamilyUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getGender()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGender', []);

        return parent::getGender();
    }

    /**
     * {@inheritDoc}
     */
    public function getWorkHistory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorkHistory', []);

        return parent::getWorkHistory();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserPackages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserPackages', []);

        return parent::getUserPackages();
    }

    /**
     * {@inheritDoc}
     */
    public function getPaymentRecords()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPaymentRecords', []);

        return parent::getPaymentRecords();
    }

    /**
     * {@inheritDoc}
     */
    public function getTempSchools()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTempSchools', []);

        return parent::getTempSchools();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthPassword', []);

        return parent::getAuthPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function getRememberToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRememberToken', []);

        return parent::getRememberToken();
    }

    /**
     * {@inheritDoc}
     */
    public function setRememberToken($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRememberToken', [$value]);

        return parent::setRememberToken($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getRememberTokenName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRememberTokenName', []);

        return parent::getRememberTokenName();
    }

    /**
     * {@inheritDoc}
     */
    public function getEmailForPasswordReset()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmailForPasswordReset', []);

        return parent::getEmailForPasswordReset();
    }

    /**
     * {@inheritDoc}
     */
    public function can($ability, $arguments = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'can', [$ability, $arguments]);

        return parent::can($ability, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function hasPermissionTo($name, $requireAll = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasPermissionTo', [$name, $requireAll]);

        return parent::hasPermissionTo($name, $requireAll);
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function cant($ability, $arguments = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cant', [$ability, $arguments]);

        return parent::cant($ability, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function cannot($ability, $arguments = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cannot', [$ability, $arguments]);

        return parent::cannot($ability, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRole($role, $requireAll = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRole', [$role, $requireAll]);

        return parent::hasRole($role, $requireAll);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRoleByName($name, $requireAll = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRoleByName', [$name, $requireAll]);

        return parent::hasRoleByName($name, $requireAll);
    }

    /**
     * {@inheritDoc}
     */
    public function belongsToOrganisation($org, $requireAll = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'belongsToOrganisation', [$org, $requireAll]);

        return parent::belongsToOrganisation($org, $requireAll);
    }

}
